"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _VisualOptions = require("./VisualOptions.css");

var _VisualOptions2 = _interopRequireDefault(_VisualOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VisualOptionsItem = function (_React$Component) {
  _inherits(VisualOptionsItem, _React$Component);

  function VisualOptionsItem(props) {
    _classCallCheck(this, VisualOptionsItem);

    var _this = _possibleConstructorReturn(this, (VisualOptionsItem.__proto__ || Object.getPrototypeOf(VisualOptionsItem)).call(this, props));

    _this.state = { over: false };
    return _this;
  }

  _createClass(VisualOptionsItem, [{
    key: "focus",
    value: function focus() {
      this.inputElement ? this.inputElement.focus() : null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          fieldName = _props.fieldName,
          name = _props.name,
          value = _props.value,
          selected = _props.selected,
          _props$showLabel = _props.showLabel,
          showLabel = _props$showLabel === undefined ? true : _props$showLabel,
          _props$showLabelAsToo = _props.showLabelAsTooltip,
          showLabelAsTooltip = _props$showLabelAsToo === undefined ? false : _props$showLabelAsToo,
          onChange = _props.onChange,
          Icon = _props.icon;


      return _react2.default.createElement(
        "div",
        {
          className: _VisualOptions2.default.item + " " + (showLabelAsTooltip ? _VisualOptions2.default.tooltip : "") + " " + (selected ? _VisualOptions2.default.selected : "") + " " + (this.state.over ? _VisualOptions2.default.over : ""),
          onMouseOver: function onMouseOver() {
            return _this2.setState({ over: true });
          },
          onMouseOut: function onMouseOut() {
            return _this2.setState({ over: false });
          },
          onClick: function onClick(e) {
            _this2.inputElement.click();
            e.preventDefault();
            _this2.focus();
          }
        },
        _react2.default.createElement(
          "div",
          { className: _VisualOptions2.default.icon },
          _react2.default.createElement(Icon, null)
        ),
        (showLabel || showLabelAsTooltip) && name && _react2.default.createElement(
          "div",
          { className: _VisualOptions2.default.tip },
          _react2.default.createElement(
            "small",
            null,
            name
          )
        ),
        _react2.default.createElement("input", {
          type: "radio",
          name: fieldName,
          "aria-label": name,
          defaultChecked: selected,
          value: value,
          className: _VisualOptions2.default.hidden,
          onClick: onChange,
          ref: function ref(element) {
            return !_this2.inputElement ? _this2.inputElement = element : null;
          }
        })
      );
    }
  }]);

  return VisualOptionsItem;
}(_react2.default.Component);

exports.default = VisualOptionsItem;