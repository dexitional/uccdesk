"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _patchEvent = require("part:@sanity/form-builder/patch-event");

var _patchEvent2 = _interopRequireDefault(_patchEvent);

var _default = require("part:@sanity/components/formfields/default");

var _default2 = _interopRequireDefault(_default);

var _VisualOptions = require("./VisualOptions");

var _VisualOptions2 = _interopRequireDefault(_VisualOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var createPatchFrom = function createPatchFrom(value) {
  return _patchEvent2.default.from(value === "" ? (0, _patchEvent.unset)() : (0, _patchEvent.set)(value));
};

var VisualOptionsContainer = function (_React$Component) {
  _inherits(VisualOptionsContainer, _React$Component);

  function VisualOptionsContainer() {
    _classCallCheck(this, VisualOptionsContainer);

    return _possibleConstructorReturn(this, (VisualOptionsContainer.__proto__ || Object.getPrototypeOf(VisualOptionsContainer)).apply(this, arguments));
  }

  _createClass(VisualOptionsContainer, [{
    key: "focus",
    value: function focus() {
      this.inputElement ? this.inputElement.focus() : null;
    }
  }, {
    key: "selectItem",
    value: function selectItem(item) {
      this.props.onChange(createPatchFrom(item));
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          value = _props.value,
          type = _props.type,
          level = _props.level;


      return _react2.default.createElement(
        _default2.default,
        {
          label: type.title ? type.title : "",
          description: type.description ? type.description : null,
          level: level
        },
        _react2.default.createElement(_VisualOptions2.default, {
          options: type.options.list,
          showLabel: type.options.showLabel,
          showTooltip: type.options.showTooltip,
          size: type.options.optionSize,
          shape: type.options.shape,
          value: value,
          ref: function ref(element) {
            return !_this2.inputElement ? _this2.inputElement = element : null;
          },
          onChange: function onChange(item) {
            return _this2.selectItem(item);
          }
        })
      );
    }
  }]);

  return VisualOptionsContainer;
}(_react2.default.Component);

VisualOptionsContainer.propTypes = {
  value: _propTypes2.default.string,
  options: _propTypes2.default.shape({
    list: _propTypes2.default.object
  }),
  onChange: _propTypes2.default.func.isRequired
};

exports.default = VisualOptionsContainer;