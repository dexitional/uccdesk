"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/textareas/default"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _icons = require("./icons");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _default = () => {
  const _React$useState = _react.default.useState(''),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        rawJson = _React$useState2[0],
        setRaw = _React$useState2[1];

  const _React$useState3 = _react.default.useState(undefined),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        message = _React$useState4[0],
        setMessage = _React$useState4[1];

  const _React$useState5 = _react.default.useState(false),
        _React$useState6 = _slicedToArray(_React$useState5, 2),
        isLoading = _React$useState6[0],
        setLoading = _React$useState6[1];

  function saveDocs() {
    return _saveDocs.apply(this, arguments);
  }

  function _saveDocs() {
    _saveDocs = _asyncToGenerator(function* () {
      setMessage(undefined);
      setLoading(true);
      let resultMsg = {
        ok: true,
        text: 'Documents created!'
      };

      try {
        const parsed = JSON.parse(rawJson);
        let promises = [];

        if (Array.isArray(parsed)) {
          resultMsg.text = `All ${parsed.length} documents were created!`;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = parsed[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              const doc = _step.value;
              promises.push(new Promise((res, rej) => {
                _client.default.create(doc).then(res).catch(rej);
              }));
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else if (typeof parsed === 'object') {
          resultMsg.text = 'Document was created!';
          promises.push(new Promise((res, rej) => {
            _client.default.create(parsed).then(res).catch(rej);
          }));
        } else {
          resultMsg = {
            ok: false,
            text: "Can't add a value that isn't an array or object!"
          };
        }

        let createdDocuments = [];
        let failedPromises = [];
        yield Promise.allSettled(promises).then(results => {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = results[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              const result = _step2.value;
              console.log(result);

              if (result.status !== 'fulfilled') {
                resultMsg = {
                  ok: false,
                  text: "Some documents couldn't be saved"
                };
                failedPromises.push(result);
              } else {
                createdDocuments.push(result.value);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        });
        resultMsg.docs = createdDocuments;
        resultMsg.failed = failedPromises;
      } catch (error) {
        console.error(error);
        resultMsg = {
          ok: false,
          text: typeof error === 'object' ? JSON.stringify(error, null, 2) : error
        };
      }

      setLoading(false);
      setMessage(resultMsg);

      if (resultMsg.ok) {
        setRaw('');
      }
    });
    return _saveDocs.apply(this, arguments);
  }

  return _react.default.createElement("main", {
    style: {
      maxWidth: '1200px',
      margin: '5vh auto'
    }
  }, _react.default.createElement("h1", null, "Save documents from JSON"), message && _react.default.createElement("pre", null, _react.default.createElement("strong", {
    style: {
      color: message.ok ? 'green' : 'red'
    }
  }, message.ok ? 'Success' : 'Error', ":"), message.text), message && (message.docs || message.failed) ? _react.default.createElement(_react.default.Fragment, null, message.ok ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("h2", null, "The created documents:"), _react.default.createElement("pre", {
    style: {
      maxHeight: '80vh',
      overflow: 'auto',
      background: 'white',
      padding: '1em'
    }
  }, JSON.stringify(message.docs, null, 2)), _react.default.createElement(_default2.default, {
    color: "success",
    onClick: () => setMessage(undefined),
    title: "Send new documents"
  }, "Send new documents")) : _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("h2", null, "Failed promises:"), _react.default.createElement("pre", {
    style: {
      maxHeight: '80vh',
      overflow: 'auto',
      background: 'white',
      padding: '1em'
    }
  }, JSON.stringify(message.docs, null, 2)), _react.default.createElement(_default2.default, {
    onClick: () => setMessage(undefined),
    title: "Try sending them again"
  }, "Try sending them again (copy the objects first)"))) : _react.default.createElement("form", {
    onSubmit: saveDocs
  }, _react.default.createElement(_default4.default, {
    label: "Your JSON document"
  }, _react.default.createElement(_default3.default, {
    value: rawJson,
    onInput: e => setRaw(e.target.value),
    isClearable: true,
    disabled: isLoading,
    rows: 15
  })), _react.default.createElement("div", {
    style: {
      marginTop: '1.5em'
    }
  }, _react.default.createElement(_default2.default, {
    color: "success",
    onClick: saveDocs,
    icon: _icons.SaveIcon,
    title: "Create documents",
    disabled: isLoading,
    loading: isLoading
  }, "Create documents"))));
};

exports.default = _default;